AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: BrightBoost Authentication API

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod, local]

  DatabaseSecretArn:
    Type: String
    Description: ARN of the secret containing Aurora database credentials

  VpcId:
    Type: String
    Description: VPC ID where Aurora cluster is deployed

  SubnetIds:
    Type: CommaDelimitedList
    Description: Subnet IDs for Lambda function (same as Aurora)

  SecurityGroupId:
    Type: String
    Description: Security group ID that allows access to Aurora

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        DATABASE_SECRET_ARN: !Ref DatabaseSecretArn

Resources:
  TeacherSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-teacher-fn"
      CodeUri: src/lambda/
      Handler: dist/teacher-signup.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        TeacherSignupApi:
          Type: Api
          Properties:
            Path: /api/signup/teacher
            Method: post
            RestApiId: !Ref AuthApi

  StudentSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-student-fn"
      CodeUri: src/lambda/
      Handler: dist/student-signup.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        StudentSignupApi:
          Type: Api
          Properties:
            Path: /api/signup/student
            Method: post
            RestApiId: !Ref AuthApi

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-login-fn"
      CodeUri: src/lambda/
      Handler: dist/login.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /api/login
            Method: post
            RestApiId: !Ref AuthApi

  StudentDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-student-dashboard-fn"
      CodeUri: src/lambda/
      Handler: dist/student-dashboard.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        StudentDashboardApi:
          Type: Api
          Properties:
            Path: /api/student/dashboard
            Method: get
            RestApiId: !Ref AuthApi

  TeacherDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-teacher-dashboard-fn"
      CodeUri: src/lambda/
      Handler: dist/teacher-dashboard.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        TeacherDashboardApi:
          Type: Api
          Properties:
            Path: /api/teacher/dashboard
            Method: get
            RestApiId: !Ref AuthApi

  ProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-profile-fn"
      CodeUri: src/lambda/
      Handler: dist/profile.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        ProfileApi:
          Type: Api
          Properties:
            Path: /api/profile
            Method: get
            RestApiId: !Ref AuthApi

  EditProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-edit-profile-fn"
      CodeUri: src/lambda/
      Handler: dist/edit-profile.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        ProfileApi:
          Type: Api
          Properties:
            Path: /api/edit-profile
            Method: post
            RestApiId: !Ref AuthApi

  GetProgressFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-progress-fn"
      CodeUri: src/lambda/
      Handler: dist/get-progress.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        StudentDashboardApi:
          Type: Api
          Properties:
            Path: /api/get-progress
            Method: get
            RestApiId: !Ref AuthApi

  AddBadgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-badge-fn"
      CodeUri: src/lambda/
      Handler: dist/add-badge.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        StudentDashboardApi:
          Type: Api
          Properties:
            Path: /api/add-badge
            Method: post
            RestApiId: !Ref AuthApi

  BreakStreakFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-break-streak-fn"
      CodeUri: src/lambda/
      Handler: dist/break-streak.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        StudentDashboardApi:
          Type: Api
          Properties:
            Path: /api/break-streak
            Method: get
            RestApiId: !Ref AuthApi

  IncrementStreakFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-increment-streak-fn"
      CodeUri: src/lambda/
      Handler: dist/increment-streak.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/postgres"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        StudentDashboardApi:
          Type: Api
          Properties:
            Path: /api/increment-streak
            Method: get
            RestApiId: !Ref AuthApi

  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,x-api-key'"
        AllowOrigin: "'https://brave-bay-0bfacc110-production.centralus.6.azurestaticapps.net'"

Outputs:
  TeacherSignupApiUrl:
    Description: "API Gateway endpoint URL for Teacher Signup function"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/signup/teacher"

  StudentSignupApiUrl:
    Description: "API Gateway endpoint URL for Student Signup function"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/signup/student"

  LoginApiUrl:
    Description: "API Gateway endpoint URL for Login function"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/login"

  TeacherSignupFunctionArn:
    Description: "Teacher Signup Lambda Function ARN"
    Value: !GetAtt TeacherSignupFunction.Arn

  StudentSignupFunctionArn:
    Description: "Student Signup Lambda Function ARN"
    Value: !GetAtt StudentSignupFunction.Arn

  LoginFunctionArn:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn

  StudentDashboardApiUrl:
    Description: "API Gateway endpoint URL for Student Dashboard function"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/student/dashboard"

  StudentDashboardFunctionArn:
    Description: "Student Dashboard Lambda Function ARN"
    Value: !GetAtt StudentDashboardFunction.Arn

  TeacherDashboardApiUrl:
    Description: "API Gateway endpoint URL for Teacher Dashboard function"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/teacher/dashboard"

  TeacherDashboardFunctionArn:
    Description: "Teacher Dashboard Lambda Function ARN"
    Value: !GetAtt TeacherDashboardFunction.Arn

  ProfileFunctionArn:
    Description: "Profile Lambda Function ARN"
    Value: !GetAtt ProfileFunction.Arn

  EditProfileFunctionArn:
    Description: "Edit Profile Lambda Function ARN"
    Value: !GetAtt EditProfileFunction.Arn

  GetProgressFunctionArn:
    Description: "Get Progress Lambda Function ARN"
    Value: !GetAtt GetProgressFunction.Arn

  AddBadgeFunctionArn:
    Description: "Add Badge Lambda Function ARN"
    Value: !GetAtt AddBadgeFunction.Arn

  BreakStreakFunctionArn:
    Description: "Break Streak Lambda Function ARN"
    Value: !GetAtt BreakStreakFunction.Arn

  IncrementStreakFunctionArn:
    Description: "Increment Streak Lambda Function ARN"
    Value: !GetAtt IncrementStreakFunction.Arn
