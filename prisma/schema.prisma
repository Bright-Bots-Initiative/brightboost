// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   // "teacher" or "student"
  xp        Int      @default(0)
  level     String   @default("Explorer")  // Changed to String to match server.cjs
  streak    Int      @default(0)           // Added streak from server.cjs
  avatarUrl String?  @default("https://api.dicebear.com/7.x/identicon/svg?seed=default")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  lessons         Lesson[]
  activities      Activity[]
  courses         Course[]
  enrollments     Enrollment[]
  badges          Badge[]  // Added badges relation
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  category    String
  date        String
  status      String   // "Published", "Draft", "Review"
  content     String?  // Optional lesson content
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  activities  Activity[]
}

model Activity {
  id          String   @id @default(cuid())
  studentId   String
  lessonId    String
  completed   Boolean  @default(false)
  grade       String?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  student     User     @relation(fields: [studentId], references: [id])
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  
  @@unique([studentId, lessonId])
}

model Course {
  id        String   @id @default(cuid())
  name      String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  teacher     User         @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  assignments Assignment[]
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  grade     String?
  enrolledAt DateTime @default(now())
  
  // Relations
  student  User   @relation(fields: [studentId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])
  
  @@unique([studentId, courseId])
}

model Assignment {
  id        String   @id @default(cuid())
  title     String
  dueDate   String
  status    String   // "pending", "completed"
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  course   Course @relation(fields: [courseId], references: [id])
}

model Badge {
  id        String   @id @default(cuid())
  name      String
  awardedAt DateTime @default(now())
  
  // Relations
  users     User[]
}
