name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Commit Messages
        id: commitlint_check
        continue-on-error: true
        run: |
          echo "Linting commit messages from ${{ github.event.pull_request.base.sha }} to ${{ github.event.pull_request.head.sha }}"
          (npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose > commitlint_output.txt 2>&1)
          exit_code=$?
          echo "Captured commitlint exit code: $exit_code"
          echo "commitlint_output<<EOF" >> $GITHUB_OUTPUT
          cat commitlint_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "commitlint_status=success" >> $GITHUB_OUTPUT
          else
            echo "commitlint_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run Prettier Check # New Step
        id: prettier_check
        continue-on-error: true
        run: |
          (npx prettier --check . > prettier_output.txt 2>&1)
          exit_code=$?
          echo "Captured Prettier exit code: $exit_code"
          echo "Prettier output:"
          cat prettier_output.txt # For logging in the Actions console
          echo "prettier_output<<EOF" >> $GITHUB_OUTPUT
          cat prettier_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "prettier_status=success" >> $GITHUB_OUTPUT
          else
            # Prettier's --check flag exits with 1 if formatting issues are found,
            # and 2 for other errors. Both should be 'failure'.
            echo "prettier_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Check for new TODOs/FIXMEs
        id: todos_check
        continue-on-error: true
        run: |
          chmod +x scripts/check-todos.sh
          bash scripts/check-todos.sh "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}"

      - name: Run linters
        id: lint
        continue-on-error: true
        run: |
          (npm run lint > lint_output.txt 2>&1)
          exit_code=$?
          echo "Captured lint exit code: $exit_code"
          echo "Lint output:"
          cat lint_output.txt
          echo "lint_output<<EOF" >> $GITHUB_OUTPUT
          cat lint_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "lint_status=success" >> $GITHUB_OUTPUT
          else
            echo "lint_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        id: tests
        continue-on-error: true
        run: |
          (npm run test > test_output.txt 2>&1)
          exit_code=$?
          echo "Captured test exit code: $exit_code"
          cat test_output.txt # For logging in the Actions console
          echo "test_output<<EOF" >> $GITHUB_OUTPUT
          cat test_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "test_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Check documentation
        id: docs_check
        continue-on-error: true
        run: |
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
          
          changed_files=$(git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- '*.ts' '*.tsx' | xargs)
          
          if [ -z "$changed_files" ]; then
            echo "No .ts or .tsx files changed. Skipping documentation check."
            echo "docs_output=No .ts or .tsx files changed." >> $GITHUB_OUTPUT
            echo "docs_status=success" >> $GITHUB_OUTPUT
          else
            echo "Checking documentation for files: $changed_files"
            # Ensure the script is executable if it's not already
            # chmod +x scripts/check-docs.mjs 
            (node scripts/check-docs.mjs $changed_files > docs_output.txt 2>&1)
            exit_code=$?
            echo "Captured docs check exit code: $exit_code"
            echo "Docs output:"
            cat docs_output.txt # For logging
            echo "docs_output<<EOF" >> $GITHUB_OUTPUT
            cat docs_output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            if [ $exit_code -eq 0 ]; then
              echo "docs_status=success" >> $GITHUB_OUTPUT
            else
              echo "docs_status=failure" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Basic Security Scan
        id: security_scan
        continue-on-error: true
        run: |
          changed_files=$(git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- '*.ts' '*.tsx' '*.js' '*.jsx' | xargs)
          
          output_file="security_scan_output.txt"
          status="success"
          
          if [ -z "$changed_files" ]; then
            echo "No relevant files changed. Skipping security scan."
            echo "scan_output=No relevant files changed for security scan." >> $GITHUB_OUTPUT
            echo "scan_status=success" >> $GITHUB_OUTPUT
          else
            echo "Scanning for 'dangerouslySetInnerHTML' in files: $changed_files"
            # Grep returns 0 if found, 1 if not found. We want to "fail" if found.
            # `grep -nHi` -n for line number, -H for filename, -i for case-insensitive
            # Add `|| true` to prevent the script from exiting if grep doesn't find anything (exit code 1)
            if grep -nHi 'dangerouslySetInnerHTML' $changed_files > $output_file; then
              echo "Potential security issue found: 'dangerouslySetInnerHTML' detected."
              status="failure" # Or "warning"
            else
              echo "No 'dangerouslySetInnerHTML' found in changed files."
              # If grep finds nothing, it exits with 1.
              # The output file will be empty in this case, so we write a message to it.
              echo "No 'dangerouslySetInnerHTML' found in changed files." > $output_file
            fi
            
            echo "scan_output<<EOF" >> $GITHUB_OUTPUT
            cat $output_file >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "scan_status=$status" >> $GITHUB_OUTPUT
          fi

      - name: Post Review Comment
        if: always() # Ensure this step runs even if previous steps failed (due to continue-on-error)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitlintStatus = "${{ steps.commitlint_check.outputs.commitlint_status }}";
            const commitlintOutput = `${{ steps.commitlint_check.outputs.commitlint_output }}`;
            const prettierStatus = "${{ steps.prettier_check.outputs.prettier_status }}";
            const prettierOutput = `${{ steps.prettier_check.outputs.prettier_output }}`;
            const todosStatus = "${{ steps.todos_check.outputs.todos_status }}";
            const rawTodosOutput = `${{ steps.todos_check.outputs.todos_output }}`;
            const todosOutput = rawTodosOutput.replace(/%0A/g, '\n').replace(/%0D/g, '\r');
            const lintStatus = "${{ steps.lint.outputs.lint_status }}";
            const lintOutput = `${{ steps.lint.outputs.lint_output }}`;
            const testStatus = "${{ steps.tests.outputs.test_status }}";
            const testOutput = `${{ steps.tests.outputs.test_output }}`;
            const docsStatus = "${{ steps.docs_check.outputs.docs_status }}";
            const docsOutput = `${{ steps.docs_check.outputs.docs_output }}`;
            const securityStatus = "${{ steps.security_scan.outputs.scan_status }}";
            const securityOutput = `${{ steps.security_scan.outputs.scan_output }}`;

            let commentBody = `## PR Review Bot Feedback ü§ñ
`;

            // Commit Message Standards
            commentBody += `### üìù Commit Message Standards\n`;
            if (commitlintStatus === 'success') {
              commentBody += `‚úÖ All commit messages adhere to conventional commit standards.\n`;
              // Optionally show details even on success if output is verbose and not empty
              if (commitlintOutput && commitlintOutput.trim() !== '' && !commitlintOutput.includes('found 0 problems, 0 warnings')) {
                commentBody += `<details><summary>Details</summary>\n\n` +
                             `\x60\x60\x60\n` +
                             `${commitlintOutput.trim()}\n` +
                             `\x60\x60\x60\n\n` +
                             `</details>\n`;
              }
            } else {
              commentBody += `‚ùå Some commit messages do not adhere to conventional commit standards.\n`;
              commentBody += `<details><summary>Details</summary>\n\n` +
                           `\x60\x60\x60\n` +
                           `${commitlintOutput.trim()}\n` +
                           `\x60\x60\x60\n\n` +
                           `</details>\n`;
            }
            commentBody += '\n';

            // Prettier
            commentBody += `### üíÖ Code Formatting (Prettier)
`;
            if (prettierStatus === 'success') {
              commentBody += `‚úÖ Code formatting is consistent.
`;
              // Optionally show details even on success if there's relevant output
              if (prettierOutput && prettierOutput.trim() !== '' && !prettierOutput.includes('All matched files use Prettier code style!')) {
                commentBody += `<details><summary>Details</summary>

\`\`\`
${prettierOutput.trim()}
\`\`\`

</details>
`;
              }
            } else {
              commentBody += `‚ùå Code formatting issues found.
`;
              commentBody += `<details><summary>Details</summary>

\`\`\`
${prettierOutput.trim()}
\`\`\`

</details>
`;
            }
            commentBody += '\n';

            // TODO/FIXME Comments
            commentBody += `### üóíÔ∏è TODO/FIXME Comments\n`;
            if (todosStatus === 'success') {
              commentBody += `‚úÖ No new or modified TODO/FIXME comments found.\n`;
              if (todosOutput && todosOutput.trim() !== '' && todosOutput.trim() !== 'No new or modified TODO/FIXME comments found.') {
                commentBody += `<details><summary>Details</summary>\n\n` +
                             `\x60\x60\x60\n` +
                             `${todosOutput.trim()}\n` +
                             `\x60\x60\x60\n\n` +
                             `</details>\n`;
              }
            } else { // 'failure' means TODOs were found
              commentBody += `‚ö†Ô∏è New or modified TODO/FIXME comments found.\n`;
              commentBody += `<details><summary>Details</summary>\n\n` +
                           `\x60\x60\x60\n` +
                           `${todosOutput.trim()}\n` +
                           `Please address these TODOs/FIXMEs or create tracking issues.\n` +
                           `\x60\x60\x60\n\n` +
                           `</details>\n`;
            }
            commentBody += '\n';

            // Linting
            commentBody += `### üßπ Linting
`;
            if (lintStatus === 'success') {
              commentBody += `‚úÖ Linting passed.
`;
              // Show details if output is not empty and not a generic success message (adjust as needed)
              if (lintOutput && lintOutput.trim() !== '' && lintOutput.trim() !== 'No linting issues found.' && !lintOutput.trim().startsWith('All files passed linting')) {
                commentBody += `<details><summary>Details</summary>

\`\`\`
${lintOutput.trim()}
\`\`\`

</details>
`;
              }
            } else {
              commentBody += `‚ùå Linting failed.
`;
              commentBody += `<details><summary>Details</summary>

\`\`\`
${lintOutput.trim()}
\`\`\`

</details>
`;
            }
            commentBody += '\n';

            // Tests
            commentBody += `### üß™ Tests
`;
            if (testStatus === 'success') {
              commentBody += `‚úÖ Tests passed.
`;
              // Show details if output is not empty and not a generic success message from test runner
              if (testOutput && testOutput.trim() !== '' && !testOutput.includes("Test Suites: All pass") && !testOutput.includes("no tests found") && !testOutput.trim().startsWith("PASS")) {
                 commentBody += `<details><summary>Details</summary>

\`\`\`
${testOutput.trim()}
\`\`\`

</details>
`;
              }
            } else {
              commentBody += `‚ùå Tests failed.
`;
              commentBody += `<details><summary>Details</summary>

\`\`\`
${testOutput.trim()}
\`\`\`

</details>
`;
            }
            commentBody += '\n';

            // Documentation
            commentBody += `### üìö Documentation Check
`;
            if (docsStatus === 'success') {
              commentBody += `‚úÖ Documentation check passed.
`;
              // Show details if output is not empty and not one of the specific success messages
              if (docsOutput && docsOutput.trim() !== '' && !docsOutput.startsWith("Documentation check passed") && !docsOutput.startsWith("No .ts or .tsx files changed.")) {
                 commentBody += `<details><summary>Details</summary>

\`\`\`
${docsOutput.trim()}
\`\`\`

</details>
`;
              }
            } else {
              commentBody += `‚ùå Documentation check failed.
`;
              commentBody += `<details><summary>Details</summary>

\`\`\`
${docsOutput.trim()}
\`\`\`

</details>
`;
            }
            commentBody += '\n';

            // Security Scan
            commentBody += `### üõ°Ô∏è Basic Security Scan
`;
            if (securityStatus === 'success') {
              commentBody += `‚úÖ Basic security scan passed.
`;
              // Show details if output is not empty and not the generic "no relevant files" message
              if (securityOutput && securityOutput.trim() !== '' && !securityOutput.startsWith("No relevant files changed for security scan.")) {
                commentBody += `<details><summary>Details</summary>

\`\`\`
${securityOutput.trim()}
\`\`\`

</details>
`;
              }
            } else { // Assuming failure means something was found or an error occurred
              commentBody += `‚ö†Ô∏è Basic security scan found potential issues or an error occurred.
`;
              commentBody += `<details><summary>Details</summary>

\`\`\`
${securityOutput.trim()}
\`\`\`

</details>
`;
            }
            commentBody += '\n';
            
            commentBody += '\n\n---\n*This is an automated message from the PR Review Bot.*';

            // Ensure the comment is not excessively long for GitHub API limits
            const MAX_COMMENT_LENGTH = 65536; 
            if (commentBody.length > MAX_COMMENT_LENGTH) {
              commentBody = commentBody.substring(0, MAX_COMMENT_LENGTH - 100) + "\n\n... (comment truncated due to length)";
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
