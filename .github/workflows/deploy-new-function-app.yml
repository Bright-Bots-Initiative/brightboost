# DEPRECATED: Azure Function App deployment - backend migrated to AWS Lambda
# This workflow is disabled as the backend now uses AWS Lambda instead of Azure Functions
# See aws-lambda-deploy.yml for current backend deployment

name: DEPRECATED - Azure Function App v2 (Disabled)

# Completely disable this workflow - no triggers
# DISABLED - Azure Function App deployment no longer used
# on:
#   workflow_dispatch:
#     inputs:
#       deploy_target:
#         description: 'Deploy to new Function App'
#         required: true
#         default: 'bb-dev-func-api-v2'
#         type: choice
#         options:
#           - bb-dev-func-api-v2

# env:
#   AZURE_FUNCTIONAPP_PACKAGE_PATH: "api"
#   NODE_VERSION: "18.x"

# jobs:
#   build:
#     runs-on: windows-latest
#     permissions:
#       contents: read
# 
#     steps:
#       - name: "Checkout GitHub Action"
#         uses: actions/checkout@v4
# 
#       - name: Setup Node ${{ env.NODE_VERSION }} Environment
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
# 
#       - name: "Resolve Project Dependencies Using Npm"
#         shell: pwsh
#         run: |
#           pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
#           npm install
#           npx prisma generate
#           npm run build --if-present
#           npm run test --if-present
#           popd
# 
#       - name: Upload artifact for deployment job
#         uses: actions/upload-artifact@v4
#         with:
#           name: node-app
#           path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
# 
#   deploy:
#     runs-on: windows-latest
#     needs: build
#     environment: 'Production'
# 
#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v4
#         with:
#           name: node-app
# 
#       - name: Login to Azure
#         uses: azure/login@v2
#         with:
#           client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A92E374E245D4441919032ED727312A6 }}
#           tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_A92E374E245D4441919032ED727312A6 }}
#           subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F2F8796F20D94FDE8FE9CF70970F7CB7 }}
# 
#       - name: "Deploy to New Function App"
#         uses: Azure/functions-action@v1
#         id: fa
#         with:
#           app-name: ${{ github.event.inputs.deploy_target }}
#           slot-name: "Production"
#           package: .
# 
#       - name: "Comprehensive Health Check"
#         shell: bash
#         run: |
#           echo "Starting comprehensive health check for ${{ github.event.inputs.deploy_target }}..."
#           sleep 90
#           
#           FUNCTION_APP_URL="https://${{ github.event.inputs.deploy_target }}.azurewebsites.net"
#           KUDU_URL="https://${{ github.event.inputs.deploy_target }}.scm.azurewebsites.net"
#           
#           echo "Function App URL: $FUNCTION_APP_URL"
#           echo "Kudu URL: $KUDU_URL"
#           
#           echo "=== Testing Function App Homepage ==="
#           HOMEPAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_APP_URL" || echo "000")
#           echo "Homepage HTTP Status: $HOMEPAGE_STATUS"
#           
#           if [ "$HOMEPAGE_STATUS" = "200" ]; then
#             echo "‚úÖ Homepage test PASSED"
#           else
#             echo "‚ùå Homepage test FAILED"
#           fi
#           
#           echo "=== Testing Kudu/SCM Accessibility ==="
#           KUDU_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$KUDU_URL" || echo "000")
#           echo "Kudu HTTP Status: $KUDU_STATUS"
#           
#           if [ "$KUDU_STATUS" = "200" ] || [ "$KUDU_STATUS" = "401" ]; then
#             echo "‚úÖ Kudu accessibility test PASSED"
#           else
#             echo "‚ùå Kudu accessibility test FAILED"
#           fi
#           
#           echo "=== Testing Hello Endpoint ==="
#           HELLO_RESPONSE=$(curl -s "$FUNCTION_APP_URL/api/hello" || echo "ERROR")
#           HELLO_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_APP_URL/api/hello" || echo "000")
#           echo "Hello HTTP Status: $HELLO_STATUS"
#           echo "Hello Response: $HELLO_RESPONSE"
#           
#           if [ "$HELLO_STATUS" = "200" ]; then
#             echo "‚úÖ Hello endpoint test PASSED"
#           else
#             echo "‚ùå Hello endpoint test FAILED"
#           fi
#           
#           echo "=== Testing Signup Endpoint Basic Connectivity ==="
#           SIGNUP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$FUNCTION_APP_URL/api/signup" \
#             -H "Content-Type: application/json" \
#             -d '{"name":"Test User","email":"test@example.com","password":"testpass","role":"teacher"}' || echo "000")
#           echo "Signup HTTP Status: $SIGNUP_STATUS"
#           
#           if [ "$SIGNUP_STATUS" = "200" ] || [ "$SIGNUP_STATUS" = "201" ] || [ "$SIGNUP_STATUS" = "400" ]; then
#             echo "‚úÖ Signup endpoint connectivity test PASSED (function executing)"
#           else
#             echo "‚ùå Signup endpoint connectivity test FAILED (function not executing)"
#           fi
#           
#           echo "=== Health Check Summary ==="
#           echo "Homepage: $HOMEPAGE_STATUS"
#           echo "Kudu: $KUDU_STATUS" 
#           echo "Hello API: $HELLO_STATUS"
#           echo "Signup API: $SIGNUP_STATUS"
#           
#           if [ "$HOMEPAGE_STATUS" = "200" ] && [ "$HELLO_STATUS" = "200" ]; then
#             echo "üéâ OVERALL HEALTH CHECK: PASSED"
#             echo "New Function App is ready for use!"
#             exit 0
#           else
#             echo "üí• OVERALL HEALTH CHECK: FAILED"
#             echo "New Function App has issues - do not migrate production traffic"
#             exit 1
#           fi
#
# All legacy backend deployment steps have been removed
# Backend now uses AWS Lambda - see aws-lambda-deploy.yml workflow
